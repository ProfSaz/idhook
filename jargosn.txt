// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {BaseHook} from "v4-periphery/src/base/hooks/BaseHook.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {CurrencyLibrary, Currency} from "v4-core/types/Currency.sol";
import {PoolKey} from "v4-core/types/PoolKey.sol";
import {BalanceDeltaLibrary, BalanceDelta} from "v4-core/types/BalanceDelta.sol";
import {IPoolManager} from "v4-core/interfaces/IPoolManager.sol";
import {Hooks} from "v4-core/libraries/Hooks.sol";

contract IDHook is BaseHook {
    event IDORegistered(
        bytes32 indexed idoId, address idoToken, uint256 totalAllocation, uint256 startTime, uint256 endTime
    );

    using CurrencyLibrary for Currency;
    using BalanceDeltaLibrary for BalanceDelta;

    struct IDOMetadata {
        address idoToken;
        PoolKey key;
        uint256 totalAllocation;
        uint256 startTime;
        uint256 endTime;
    }

    mapping(address => mapping(bytes32 => uint256)) public liquidityStartTime; // Track when user started providing liquidity
    mapping(address => mapping(bytes32 => uint256)) public accruedShares; // Track accumulated shares

    mapping(bytes32 => IDOMetadata) public idos;
    address public idoVault;
    uint256 public totalShares;
    mapping(address => uint256) public userShares;
    uint128 constant WEIGHT = 1e18;

    constructor(IPoolManager _manager, address idoVault_) BaseHook(_manager) {
        idoVault = idoVault_;
    }

    function getHookPermissions() public pure override returns (Hooks.Permissions memory) {
        return Hooks.Permissions({
            beforeInitialize: false,
            afterInitialize: false,
            beforeAddLiquidity: false,
            beforeRemoveLiquidity: false,
            afterAddLiquidity: true,
            afterRemoveLiquidity: true,
            beforeSwap: false,
            afterSwap: true,
            beforeDonate: false,
            afterDonate: false,
            beforeSwapReturnDelta: false,
            afterSwapReturnDelta: false,
            afterAddLiquidityReturnDelta: false,
            afterRemoveLiquidityReturnDelta: false
        });
    }

    function afterSwap(
        address,
        PoolKey calldata key,
        IPoolManager.SwapParams calldata swapParams,
        BalanceDelta delta,
        bytes calldata hookData
    ) external override onlyPoolManager returns (bytes4, int128) {
        (address user, bytes32 idoId) = abi.decode(hookData, (address, bytes32));
        require(_matchesPoolKey(key, idos[idoId].key), "Invalid PoolKey for this IDO");

        uint256 rawShares;

        if (swapParams.zeroForOne) {
            rawShares = uint256(int256(-delta.amount0()));
        } else {
            rawShares = uint256(int256(-delta.amount1()));
        }

        _assignShares(user, rawShares, WEIGHT);

        return (this.afterSwap.selector, 0);
    }

    function afterAddLiquidity(
        address,
        PoolKey calldata key,
        IPoolManager.ModifyLiquidityParams calldata,
        BalanceDelta delta,
        BalanceDelta,
        bytes calldata hookData
    ) external override onlyPoolManager returns (bytes4, BalanceDelta) {
        (address user, bytes32 idoId) = abi.decode(hookData, (address, bytes32));
        require(_matchesPoolKey(key, idos[idoId].key), "Invalid PoolKey for this IDO");

        IDOMetadata storage ido = idos[idoId];
        require(block.timestamp >= ido.startTime && block.timestamp <= ido.endTime, "Outside IDO period");

        uint256 rawShares = uint256(int256(-delta.amount0()) + int256(-delta.amount1()));

        // Calculate the proportion of the IDO period remaining
        uint256 timeRemaining = ido.endTime - block.timestamp;
        uint256 totalIdoPeriod = ido.endTime - ido.startTime;
        uint256 timeRatio = (timeRemaining * 1e18) / totalIdoPeriod;

        // Calculate time-weighted shares
        uint256 weightedShares = _calculateShares(rawShares, timeRatio);

        if (liquidityStartTime[user][idoId] == 0) {
            // First-time liquidity addition
            liquidityStartTime[user][idoId] = block.timestamp;
            accruedShares[user][idoId] += weightedShares;
        } else {
            // Update existing shares proportionally
            uint256 timeProvided = block.timestamp - liquidityStartTime[user][idoId];
            uint256 effectiveShares =
                _calculateShares(accruedShares[user][idoId], (timeProvided * 1e18) / totalIdoPeriod);

            accruedShares[user][idoId] = effectiveShares + weightedShares;
        }

        totalShares += weightedShares;

        return (this.afterAddLiquidity.selector, delta);
    }

    function afterRemoveLiquidity(
        address,
        PoolKey calldata key,
        IPoolManager.ModifyLiquidityParams calldata,
        BalanceDelta delta,
        BalanceDelta,
        bytes calldata hookData
    ) external override onlyPoolManager returns (bytes4, BalanceDelta) {
        (address user, bytes32 idoId) = abi.decode(hookData, (address, bytes32));
        require(_matchesPoolKey(key, idos[idoId].key), "Invalid PoolKey for this IDO");

        IDOMetadata storage ido = idos[idoId];

        if (liquidityStartTime[user][idoId] != 0) {
            uint256 rawShares = uint256(int256(-delta.amount0()) + int256(-delta.amount1()));
            uint256 timeProvided = block.timestamp - liquidityStartTime[user][idoId];
            uint256 totalIdoPeriod = ido.endTime - ido.startTime;

            // Ensure timeProvided does not exceed the IDO period
            if (block.timestamp > ido.endTime) {
                timeProvided = ido.endTime - liquidityStartTime[user][idoId];
            }

            uint256 timeRatio = (timeProvided * 1e18) / totalIdoPeriod;
            uint256 weightedShares = _calculateShares(rawShares, timeRatio);

            accruedShares[user][idoId] += weightedShares;

            // Reset tracking if liquidity is removed before IDO ends
            if (block.timestamp <= ido.endTime) {
                liquidityStartTime[user][idoId] = 0;
            }
        }

        return (this.afterRemoveLiquidity.selector, delta);
    }

    function claimAllocation(bytes32 idoId) external {
        IDOMetadata storage ido = idos[idoId];
        require(block.timestamp > ido.endTime, "IDO still in progress");

        // Finalize shares if liquidity was still active at IDO end
        if (liquidityStartTime[msg.sender][idoId] != 0) {
            uint256 timeProvided = ido.endTime - liquidityStartTime[msg.sender][idoId];
            uint256 totalIdoPeriod = ido.endTime - ido.startTime;
            uint256 timeRatio = (timeProvided * 1e18) / totalIdoPeriod;

            uint256 remainingLiquidityShares = _calculateShares(userShares[msg.sender], timeRatio);
            accruedShares[msg.sender][idoId] += remainingLiquidityShares;

            liquidityStartTime[msg.sender][idoId] = 0; // Reset tracking
        }

        uint256 allocation = getUserAllocation(msg.sender, idoId);
        require(allocation > 0, "No allocation available");

        // Reduce total allocation and user shares
        ido.totalAllocation -= allocation;
        userShares[msg.sender] = 0;
        accruedShares[msg.sender][idoId] = 0;

        // Transfer allocation
        IERC20(ido.idoToken).transferFrom(idoVault, msg.sender, allocation);
    }

    function getUserAllocation(address user, bytes32 idoId) public view returns (uint256) {
        IDOMetadata storage ido = idos[idoId];
        uint256 userShares_ = accruedShares[user][idoId];

        if (userShares_ == 0 || totalShares == 0) {
            return 0;
        }

        return (userShares_ * ido.totalAllocation) / totalShares;
    }

    function getAccruedShare(address user, bytes32 idoId) public view returns (uint256) {
        return accruedShares[user][idoId];
    }

    function _calculateTimeWeightedShares(address user, bytes32 idoId, uint256 currentTime, uint256 weightedShares)
        internal
        view
        returns (uint256)
    {
        IDOMetadata storage ido = idos[idoId];

        uint256 timeHeld = currentTime - liquidityStartTime[user][idoId];
        uint256 idoDuration = ido.endTime - ido.startTime;

        // Proportion of IDO duration the liquidity was held for
        return (weightedShares * timeHeld) / idoDuration;
    }

    //probably use keccak to get byteId
    function registerIDO(
        bytes32 idoId,
        address idoToken,
        PoolKey calldata key,
        uint256 totalAllocation,
        uint256 startTime,
        uint256 endTime
    ) external {
        require(idos[idoId].idoToken == address(0), "IDO already registered");
        require(startTime >= block.timestamp, " Invalid startTime");
        require(endTime > startTime, "Invalid timeline");

        require(idoToken != address(0), "idoToken cannot be address(0)");

        IDOMetadata storage ido = idos[idoId];
        ido.idoToken = idoToken;
        ido.key = key;
        ido.totalAllocation = totalAllocation;
        ido.startTime = startTime;
        ido.endTime = endTime;

        IERC20(idoToken).transferFrom(msg.sender, idoVault, totalAllocation);

        emit IDORegistered(idoId, idoToken, totalAllocation, startTime, endTime);
    }

    function _matchesPoolKey(PoolKey calldata key, PoolKey storage idoKey) internal view returns (bool) {
        return (key.currency0 == idoKey.currency0 && key.currency1 == idoKey.currency1)
            || (key.currency0 == idoKey.currency1 && key.currency1 == idoKey.currency0);
    }

    function _assignShares(address user, uint256 rawShares, uint256 weight) internal {
        uint256 weightedShares = _calculateShares(rawShares, weight);
        userShares[user] += weightedShares;
        totalShares += weightedShares;
    }

    function _calculateShares(uint256 amount, uint256 weight) internal pure returns (uint256) {
        return (amount * weight) / 1e18;
    }

    function getUserShares(address user) public view returns (uint256) {
        return userShares[user];
    }

    // function getUserAllocation(address user, bytes32 idoId) public view returns (uint256) {
    //     IDOMetadata storage ido = idos[idoId];
    //     uint256 userShares_ = accruedShares[user][idoId];

    //     if (userShares_ == 0 || totalShares == 0) {
    //         return 0;
    //     }

    //     return (userShares_ * ido.totalAllocation) / totalShares;
    // }

    // function claimAllocation(bytes32 idoId) external {
    //     require(block.timestamp > idos[idoId].endTime, "IDO still in progress");

    //     // Finalize shares if not already
    //     if (liquidityStartTime[msg.sender][idoId] != 0) {
    //         uint256 currentWeightedShares = _calculateShares(userShares[msg.sender], WEIGHT);
    //         accruedShares[msg.sender][idoId] +=
    //             _calculateTimeWeightedShares(msg.sender, idoId, idos[idoId].endTime, currentWeightedShares);
    //         liquidityStartTime[msg.sender][idoId] = 0; // Reset tracking
    //     }

    //     uint256 allocation = (accruedShares[msg.sender][idoId] * idos[idoId].totalAllocation) / totalShares;
    //     require(allocation > 0, "No allocation available");

    //     IDOMetadata storage ido = idos[idoId];
    //     idos[idoId].totalAllocation -= allocation;
    //     userShares[msg.sender] = 0;

    //     IERC20(ido.idoToken).transferFrom(idoVault, msg.sender, allocation);
    // }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Test} from "forge-std/Test.sol";

import {Deployers} from "@uniswap/v4-core/test/utils/Deployers.sol";
import {PoolSwapTest} from "v4-core/test/PoolSwapTest.sol";
import {MockERC20} from "solmate/src/test/utils/mocks/MockERC20.sol";

import {PoolManager} from "v4-core/PoolManager.sol";
import {IPoolManager} from "v4-core/interfaces/IPoolManager.sol";

import {Currency, CurrencyLibrary} from "v4-core/types/Currency.sol";

import {Hooks} from "v4-core/libraries/Hooks.sol";
import {TickMath} from "v4-core/libraries/TickMath.sol";
import {SqrtPriceMath} from "v4-core/libraries/SqrtPriceMath.sol";
import {LiquidityAmounts} from "@uniswap/v4-core/test/utils/LiquidityAmounts.sol";

import "forge-std/console.sol";
import {IDHook} from "../src/Hook.sol";

contract TestIDHook is Test, Deployers {
    using CurrencyLibrary for Currency;

    MockERC20 token;

    MockERC20 usdc;
    MockERC20 dai;
    MockERC20 idoToken = new MockERC20("idoT", "idoT", 18);

    Currency ethCurrency = Currency.wrap(address(0));
    Currency tokenCurrency;
    Currency daiCurrency;
    Currency usdcCurrency;

    address idoVault = makeAddr("idoVault");
    address user1 = makeAddr("user1");
    address user2 = makeAddr("user2");
    address launcher = makeAddr("launcher");
    bytes32 idoId = keccak256("hello");
    uint256 totalAllocation = 1000 ether;

    IDHook hook;

    function setUp() public {
        deployFreshManagerAndRouters();

        usdc = new MockERC20("usdc", "usdc", 18);
        dai = new MockERC20("dai", "dai", 18);

        usdcCurrency = Currency.wrap(address(usdc));
        daiCurrency = Currency.wrap(address(dai));

        dai.mint(user2, 1000 ether);
        dai.mint(user1, 1000 ether);
        usdc.mint(user2, 1000 ether);
        usdc.mint(user1, 1000 ether);
        idoToken.mint(launcher, 3000 ether);

        uint160 flags =
            uint160(Hooks.AFTER_ADD_LIQUIDITY_FLAG | Hooks.AFTER_REMOVE_LIQUIDITY_FLAG | Hooks.AFTER_SWAP_FLAG);
        deployCodeTo("Hook.sol", abi.encode(manager, idoVault), address(flags));

        hook = IDHook(address(flags));

        vm.prank(idoVault);
        idoToken.approve(address(hook), type(uint256).max);

        usdc.approve(address(swapRouter), type(uint256).max);
        dai.approve(address(swapRouter), type(uint256).max);
        usdc.approve(address(modifyLiquidityRouter), type(uint256).max);
        dai.approve(address(modifyLiquidityRouter), type(uint256).max);

        vm.startPrank(user1);
        dai.approve(address(swapRouter), type(uint256).max);
        dai.approve(address(modifyLiquidityRouter), type(uint256).max);
        usdc.approve(address(swapRouter), type(uint256).max);
        usdc.approve(address(modifyLiquidityRouter), type(uint256).max);
        vm.stopPrank();

        // Initialize a pool
        (key,) = initPool(
            usdcCurrency,
            daiCurrency,
            hook,
            3000, // Swap Fees
            SQRT_PRICE_1_1 // Initial Sqrt(P) value = 1
        );

        uint256 totalAllocation = 1000 ether;
        uint256 startTime = 1 + block.timestamp;
        uint256 endTime = 5 + block.timestamp;

        vm.startPrank(launcher);
        idoToken.approve(address(hook), type(uint256).max);
        hook.registerIDO(idoId, address(idoToken), key, totalAllocation, startTime, endTime);
        vm.stopPrank();
    }

    function test_addLiquidity() public {
        // Retrieve IDO details from the hook contract
        (,,, uint256 startTime, uint256 endTime) = hook.idos(idoId);

        // Ensure the IDO is active
        vm.warp(startTime + 1);

        uint160 sqrtPriceX96 = SQRT_PRICE_1_1;
        uint160 sqrtPriceAtTickLower = TickMath.getSqrtPriceAtTick(-60);
        uint160 sqrtPriceAtTickUpper = TickMath.getSqrtPriceAtTick(60);

        uint256 daiToAdd = 100 ether;

        uint128 liquidityDelta =
            LiquidityAmounts.getLiquidityForAmount0(sqrtPriceAtTickLower, sqrtPriceAtTickUpper, daiToAdd);

        uint256 usdcToAdd =
            LiquidityAmounts.getAmount1ForLiquidity(sqrtPriceAtTickLower, sqrtPriceAtTickUpper, liquidityDelta);

        console.log("Liquidity Delta:", liquidityDelta);
        console.log("DAI to Add:", daiToAdd);
        console.log("USDC to Add:", usdcToAdd);

        vm.startPrank(user1);

        // Approve the router to spend tokens
        dai.approve(address(modifyLiquidityRouter), daiToAdd);
        usdc.approve(address(modifyLiquidityRouter), usdcToAdd);

        modifyLiquidityRouter.modifyLiquidity(
            key,
            IPoolManager.ModifyLiquidityParams({
                tickLower: -60,
                tickUpper: 60,
                liquidityDelta: int256(uint256(liquidityDelta)),
                salt: bytes32(0)
            }),
            abi.encode(user1, idoId)
        );
        vm.stopPrank();

        // console.log("user1 allocation", hook.getUserAllocation(user1, idoId));

        vm.startPrank(user2);

        // Approve the router to spend tokens
        dai.approve(address(modifyLiquidityRouter), daiToAdd);
        usdc.approve(address(modifyLiquidityRouter), usdcToAdd);

        modifyLiquidityRouter.modifyLiquidity(
            key,
            IPoolManager.ModifyLiquidityParams({
                tickLower: -60,
                tickUpper: 60,
                liquidityDelta: int256(uint256(liquidityDelta)),
                salt: bytes32(0)
            }),
            abi.encode(user2, idoId)
        );

        vm.warp(startTime + 1);

        modifyLiquidityRouter.modifyLiquidity(
            key,
            IPoolManager.ModifyLiquidityParams({
                tickLower: -60,
                tickUpper: 60,
                liquidityDelta: int256(uint256(liquidityDelta)),
                salt: bytes32(0)
            }),
            abi.encode(user2, idoId)
        );
        vm.stopPrank();
        // assertEq(hook.getUserAllocation(user2, idoId) + hook.getUserAllocation(user1, idoId), totalAllocation);
        // assertEq(hook.getUserShares(user1) + hook.getUserShares(user2), hook.totalShares());

        console.log("user2 allocation", hook.getUserAllocation(user2, idoId));
        console.log("user1 allocation", hook.getUserAllocation(user1, idoId));
        console.log("total allocation", hook.idos(idoId).totalAllocation);
        // console.log("total allcoation ", hook.totalShares());
        // console.log("user1 shares", hook.getUserShares(user1));
        // console.log("user2 shares", hook.getUserShares(user2));
        console.log("user1 AS", hook.getAccruedShare(user1, idoId));
        console.log("user2 AS", hook.getAccruedShare(user2, idoId));
    }

    function test_swap() public {
        test_addLiquidity();

        vm.startPrank(user1);
        // Debug: Check router address and approvals
        console.log("Swap Router Address:", address(swapRouter));
        console.log("User1 DAI Approval to Router:", dai.allowance(user1, address(swapRouter)));

        int256 swapAmount = -10 ether;
        swapRouter.swap(
            key,
            IPoolManager.SwapParams({
                zeroForOne: true,
                amountSpecified: swapAmount,
                sqrtPriceLimitX96: TickMath.MIN_SQRT_PRICE + 1
            }),
            PoolSwapTest.TestSettings({takeClaims: false, settleUsingBurn: false}),
            abi.encode(user1, idoId)
        );
        vm.stopPrank();

        // assertApproxEqAbs(hook.getUserShares(user1) + hook.getUserShares(user2), hook.totalShares(), 0.001 ether);
        // assertApproxEqAbs(
        //     hook.getUserAllocation(user2, idoId) + hook.getUserAllocation(user1, idoId), totalAllocation, 0.001 ether
        // );
        // assert(hook.getUserShares(user1) > hook.getUserShares(user2));

        // Print balances after swap
        console.log("user2 allocation", hook.getUserAllocation(user2, idoId));
        console.log("user1 allocation", hook.getUserAllocation(user1, idoId));
        console.log("total allocation", totalAllocation);
        console.log("total shares ", hook.totalShares());
        console.log("user1 shares", hook.getUserShares(user1));
        console.log("user2 shares", hook.getUserShares(user2));
    }

    function test_claim_allocation() public {
        test_addLiquidity();
        test_swap();

        console.log("balance of user1 before claim: ", idoToken.balanceOf(user1));

        (,,, uint256 startTime, uint256 endTime) = hook.idos(idoId);

        uint256 user1Allocation = hook.getUserAllocation(user1, idoId);

        // vm.prank(idoVault);
        vm.warp(endTime + 1);

        vm.startPrank(user1);
        hook.claimAllocation(idoId);
        vm.stopPrank();

        console.log(user1Allocation);
        console.log("balance of user1 after claim: ", idoToken.balanceOf(user1));
        console.log("allocation of user2:", hook.getUserAllocation(user2, idoId));
        console.log("balance of IdoVault", idoToken.balanceOf(idoVault));
    }
}
